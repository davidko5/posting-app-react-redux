{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","features/users/usersSlice.js","features/posts/PostAuthor.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/TimeAgo.js","components/Spinner.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","features/users/UsersList.js","features/users/UserPage.js","features/notifications/NotificationList.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","_x","_client","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","endpoint","_ref","body","customConfig","headers","config","data","response","_args","wrap","_context","prev","next","length","undefined","_objectWithoutProperties","_excluded","_objectSpread","method","JSON","stringify","window","fetch","sent","json","ok","abrupt","status","url","Error","statusText","t0","Promise","reject","message","stop","get","post","fetchNotifications","createAsyncThunk","_ref2","_","getState","allNotifications","_allNotifications","latestNotification","latestTimestamp","selectAllNotifications","_slicedToArray","date","concat","_x2","notificationsAdapter","createEntityAdapter","sortComparer","a","b","localeCompare","notificationsSlice","createSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","builder","addCase","fulfilled","upsertMany","payload","isNew","actions","getSelectors","notifications","selectAll","Navbar","unreadNotificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","n","_jsx","className","children","_jsxs","Link","to","onClick","usersAdapter","fetchUsers","usersSlice","setAll","_usersAdapter$getSele","users","selectAllUsers","selectUserById","selectById","PostAuthor","userId","author","postsAdapter","error","postsSlice","postUpdated","_action$payload","id","title","content","existingPost","reactionAdded","_action$payload2","postId","reaction","reactions","fetchPosts","pending","rejected","addNewPost","addOne","_postsAdapter$getSele","posts","selectAllPosts","selectPostById","selectPostIds","selectIds","selectPostByUser","createSelector","user","_callee2","initialPost","_context2","_postsSlice$actions","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","reactionButtons","entries","map","_ref3","emoji","type","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","Spinner","_ref$text","text","_ref$size","size","header","style","height","width","PostExcerpt","substring","PostList","orderedPostIds","postStatus","useEffect","AddPostForm","_useState","useState","_useState2","setTitle","_useState3","_useState4","setContent","_useState5","_useState6","setUserId","_useState7","_useState8","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","unwrap","console","log","finish","userOptions","value","htmlFor","onChange","e","target","disabled","SinglePostPage","match","params","EditPostForm","history","useHistory","placeholder","push","UsersList","renderedUsers","UserPage","postTitles","NotificationsList","useLayoutEffect","renderedNotifications","find","notificationClassname","classnames","new","App","seedDate","Router","Switch","Route","exact","path","render","React","Fragment","component","Redirect","configureStore","reducer","postsReduser","usersReduser","notificationsReduser","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","res","ctx","getAll","delay","findFirst","where","equals","patch","_req$body","updatedPost","update","_defineProperty","generateRandomNotifications","socketServer","setupWorker","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","_toConsumableArray","Array","template","between","_start","store","ReactDOM","StrictMode","Provider","document","getElementById","start"],"mappings":"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","file":"static/js/main.515efb0b.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n\r\nexport async function client(endpoint, { body, ...customConfig } = {}) {\r\n  const headers = { 'Content-Type': 'application/json' }\r\n\r\n  const config = {\r\n    method: body ? 'POST' : 'GET',\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  }\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body)\r\n  }\r\n\r\n  let data\r\n  try {\r\n    const response = await window.fetch(endpoint, config)\r\n    data = await response.json()\r\n    if (response.ok) {\r\n      // Return a result object similar to Axios\r\n      return {\r\n        status: response.status,\r\n        data,\r\n        headers: response.headers,\r\n        url: response.url,\r\n      }\r\n    }\r\n    throw new Error(response.statusText)\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data)\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: 'GET' })\r\n}\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body })\r\n}\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n} from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nexport const fetchNotifications = createAsyncThunk(\r\n  'notifications/fetchNotifications',\r\n  async (_, { getState }) => {\r\n    const allNotifications = selectAllNotifications(getState())\r\n    const [latestNotification] = allNotifications\r\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\r\n    const response = await client.get(\r\n      `/fakeApi/notifications?since=${latestTimestamp}`\r\n    )\r\n    return response.data\r\n  }\r\n)\r\n\r\nconst notificationsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => a.date.localeCompare(b.date),\r\n})\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState: notificationsAdapter.getInitialState(),\r\n  reducers: {\r\n    allNotificationsRead(state, action) {\r\n      Object.values(state.entities).forEach(\r\n        (notification) => (notification.read = true)\r\n      )\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\r\n      notificationsAdapter.upsertMany(state, action.payload)\r\n      Object.values(state.entities).forEach(\r\n        (notification) => (notification.isNew = !notification.read)\r\n      )\r\n    })\r\n  },\r\n})\r\n\r\nexport default notificationsSlice.reducer\r\nexport const { allNotificationsRead } = notificationsSlice.actions\r\n// export const selectAllNotifications = (state) => state.notifications\r\nexport const {selectAll: selectAllNotifications} = notificationsAdapter.getSelectors(state => state.notifications)","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  fetchNotifications,\r\n  selectAllNotifications,\r\n} from '../features/notifications/notificationsSlice'\r\n\r\nexport const Navbar = () => {\r\n  const dispatch = useDispatch()\r\n  const notifications = useSelector(selectAllNotifications)\r\n  const numUnreadNotifications = notifications.filter((n) => !n.read).length\r\n\r\n  const fetchNewNotifications = () => {\r\n    dispatch(fetchNotifications())\r\n  }\r\n\r\n  let unreadNotificationsBadge\r\n\r\n  if (numUnreadNotifications > 0) {\r\n    unreadNotificationsBadge = (\r\n      <span className=\"badge\">{numUnreadNotifications}</span>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>React/Redux Pet Project</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\">\r\n            <Link to=\"/\">Posts</Link>\r\n            <Link to=\"/users\">Users</Link>\r\n            <Link to=\"/notifications\">\r\n              Notifications {unreadNotificationsBadge}\r\n            </Link>\r\n          </div>\r\n          <button className=\"button\" onClick={fetchNewNotifications}>\r\n            Refresh Notifications\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n} from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst usersAdapter = createEntityAdapter()\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n  const response = await client.get('/fakeApi/users')\r\n  return response.data\r\n})\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState: usersAdapter.getInitialState(),\r\n  reducers: {},\r\n  extraReducers(builder) {\r\n    builder.addCase(fetchUsers.fulfilled, usersAdapter.setAll)\r\n  },\r\n})\r\n\r\nexport default usersSlice.reducer\r\n\r\n// export const selectAllUsers = state => state.users\r\n// export const selectUserById = (state, userId) => state.users.find(user => user.id === userId)\r\n\r\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\r\n  usersAdapter.getSelectors((state) => state.users)\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUserById } from '../users/usersSlice'\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) => selectUserById(state, userId))\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>\r\n}\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createSelector,\r\n  createEntityAdapter,\r\n} from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\r\n})\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n  status: 'idle',\r\n  error: null,\r\n})\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload\r\n      const existingPost = state.entities[id]\r\n      if (existingPost) {\r\n        existingPost.title = title\r\n        existingPost.content = content\r\n      }\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload\r\n      const existingPost = state.entities[postId]\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++\r\n      }\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.status = 'loading'\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = 'succeeded'\r\n        // state.posts = state.posts.concat(action.payload)\r\n        postsAdapter.upsertMany(state, action.payload)\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = 'failed'\r\n        state.error = action.error.message\r\n      })\r\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\r\n  },\r\n})\r\n\r\n// export const selectAllPosts = (state) => state.posts.posts\r\n\r\n// export const selectPostById = (state, postId) =>\r\n//   state.posts.posts.find((post) => post.id === postId)\r\n\r\nexport const {\r\n  selectAll: selectAllPosts, \r\n  selectById: selectPostById,\r\n  selectIds: selectPostIds\r\n} = postsAdapter.getSelectors(state => state.posts)\r\n\r\nexport const selectPostByUser = createSelector(\r\n  [selectAllPosts, (state, userId) => userId],\r\n  (posts, userId) => posts.filter((post) => post.user === userId)\r\n)\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n  const response = await client.get('/fakeApi/posts')\r\n  return response.data\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  'posts/addNewPost',\r\n  async (initialPost) => {\r\n    const response = await client.post('fakeApi/posts', initialPost)\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const { postUpdated, reactionAdded } = postsSlice.actions\r\nexport default postsSlice.reducer","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { reactionAdded } from './postsSlice'\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: '👍',\r\n  hooray: '🎉',\r\n  heart: '❤️',\r\n  rocket: '🚀',\r\n  eyes: '👀',\r\n}\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n        onClick={() => {\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }}\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  return <div>{reactionButtons}</div>\r\n}\r\n","import React from 'react'\r\nimport { parseISO, formatDistanceToNow} from 'date-fns'\r\n\r\nexport const TimeAgo = ({timestamp}) => {\r\n    let timeAgo = ''\r\n    if(timestamp) {\r\n        const date = parseISO(timestamp)\r\n        const timePeriod = formatDistanceToNow(date)\r\n        timeAgo = `${timePeriod} ago`\r\n    }\r\n\r\n    return (\r\n        <span title={timestamp}>\r\n            &nbsp; <i>{timeAgo} </i>\r\n        </span>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Spinner = ({ text = '', size = '5em' }) => {\r\n  const header = text ? <h4>{text}</h4> : null\r\n  return (\r\n    <div className=\"spinner\">\r\n      {header}\r\n      <div className=\"loader\" style={{ height: size, width: size }} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { ReactionButtons } from './ReactionButtons'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport {\r\n  selectPostIds,\r\n  selectPostById,\r\n  fetchPosts,\r\n} from './postsSlice'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\nconst PostExcerpt = ({ postId }) => {\r\n  const post = useSelector((state => selectPostById(state, postId)))\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n      <div>\r\n        <TimeAgo timestamp={post.date} />\r\n        <PostAuthor userId={post.user} />\r\n      </div>\r\n      <ReactionButtons post={post} />\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport const PostList = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const orderedPostIds = useSelector(selectPostIds)\r\n  const postStatus = useSelector((state) => state.posts.status)\r\n  const error = useSelector((state) => state.posts.error)\r\n\r\n  useEffect(() => {\r\n    if (postStatus === 'idle') dispatch(fetchPosts())\r\n  }, [postStatus, dispatch])\r\n\r\n  let content\r\n  if (postStatus === 'loading') {\r\n    content = <Spinner text=\"Loading...\" />\r\n  } else if (postStatus === 'succeeded') {\r\n    content = orderedPostIds.map((postId) => (\r\n      <PostExcerpt key={postId} postId={postId} />\r\n    ))\r\n  } else if (postStatus === 'failed') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {content}\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addNewPost } from './postsSlice'\r\nimport { selectAllUsers } from '../users/usersSlice'\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [userId, setUserId] = useState('')\r\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const users = useSelector(selectAllUsers)\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value)\r\n  const onContentChanged = (e) => setContent(e.target.value)\r\n  const onAuthorChanged = (e) => setUserId(e.target.value)\r\n\r\n  const canSave = [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n  const onSavePostClicked = async () => {\r\n    if(canSave) {\r\n      try {\r\n        setAddRequestStatus('pending')\r\n        await dispatch(addNewPost({title, content, user: userId})).unwrap()\r\n        setTitle('')\r\n        setContent('')\r\n        setUserId('')\r\n      }\r\n      catch (err) {\r\n        console.log('Failed to save the post:', err)\r\n      }\r\n      finally {\r\n        setAddRequestStatus('idle')\r\n      }\r\n    }\r\n  }\r\n\r\n  const userOptions = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ))\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {userOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\nimport { selectPostById } from './postsSlice'\r\n\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const post = useSelector(state => selectPostById(state, postId))\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n        <p className=\"post-content\">{post.content}</p>\r\n        <div>\r\n            <TimeAgo timestamp={post.date}/>\r\n            <PostAuthor userId={post.user} />\r\n        </div>\r\n        <ReactionButtons post={post} />\r\n\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { postUpdated } from './postsSlice'\r\nimport { selectPostById } from './postsSlice'\r\n\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const post = useSelector((state) => selectPostById(state, postId))\r\n\r\n  const [title, setTitle] = useState(post.title)\r\n  const [content, setContent] = useState(post.content)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onTitleChanged = e => setTitle(e.target.value)\r\n  const onContentChanged = e => setContent(e.target.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({ id: postId, title, content }))\r\n      history.push(`/posts/${postId}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { selectAllUsers } from './usersSlice'\r\n\r\nexport const UsersList = () => {\r\n  const users = useSelector(selectAllUsers)\r\n\r\n  const renderedUsers = users.map(user => (\r\n    <li key={user.id}>\r\n      <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <section>\r\n      <h2>Users</h2>\r\n\r\n      <ul>{renderedUsers}</ul>\r\n    </section>\r\n  )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { selectUserById } from '../users/usersSlice'\r\nimport { selectPostByUser } from '../posts/postsSlice'\r\n\r\nexport const UserPage = ({ match }) => {\r\n  const { userId } = match.params\r\n\r\n  const user = useSelector(state => selectUserById(state, userId))\r\n\r\n  const postsForUser = useSelector(state => selectPostByUser(state, userId))\r\n\r\n\r\n  const postTitles = postsForUser.map(post => (\r\n    <li key={post.id}>\r\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <section>\r\n      <h2>{user.name}</h2>\r\n\r\n      <ul>{postTitles}</ul>\r\n    </section>\r\n  )\r\n}","import React, { useLayoutEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { formatDistanceToNow, parseISO } from 'date-fns'\r\nimport classnames from 'classnames'\r\nimport { selectAllUsers } from '../users/usersSlice'\r\n\r\nimport {\r\n  selectAllNotifications,\r\n  allNotificationsRead,\r\n} from './notificationsSlice'\r\n\r\nexport const NotificationsList = () => {\r\n  const dispatch = useDispatch()\r\n  const notifications = useSelector(selectAllNotifications)\r\n  const users = useSelector(selectAllUsers)\r\n\r\n  useLayoutEffect(() => {\r\n    dispatch(allNotificationsRead())\r\n  })\r\n\r\n  const renderedNotifications = notifications.map((notification) => {\r\n    const timeAgo = formatDistanceToNow(parseISO(notification.date))\r\n    const user = users.find((user) => user.id === notification.user) || {\r\n      name: 'Unknown User',\r\n    }\r\n    const notificationClassname = classnames('notification', {\r\n      new: notification.isNew,\r\n    })\r\n    return (\r\n      <div key={notification.id} className={notificationClassname}>\r\n        <div>\r\n          <b>{user.name}</b> {notification.message}\r\n        </div>\r\n        <div title={notification.date}>\r\n          <i>{timeAgo} ago</i>\r\n        </div>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <section className=\"notificationsList\">\r\n      <h2>Notifications</h2>\r\n      {renderedNotifications}\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './app/Navbar'\r\nimport { PostList } from './features/posts/PostsList'\r\nimport { AddPostForm } from './features/posts/AddPostForm'\r\nimport { SinglePostPage } from './features/posts/SinglePostPage'\r\nimport { EditPostForm } from './features/posts/EditPostForm'\r\nimport { UsersList } from './features/users/UsersList'\r\nimport { UserPage } from './features/users/UserPage'\r\nimport { NotificationsList } from './features/notifications/NotificationList'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <React.Fragment>\r\n                <AddPostForm />\r\n                <PostList />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route exact path=\"/notifications\" component={NotificationsList} />\r\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage}/>\r\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\r\n          <Route exact path=\"/users\" component={UsersList} />\r\n          <Route exact path=\"/users/:userId\" component={UserPage} />\r\n\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { rest, setupWorker } from 'msw'\r\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\nimport faker from 'faker'\r\nimport seedrandom from 'seedrandom'\r\nimport { Server as MockSocketServer } from 'mock-socket'\r\nimport { setRandom } from 'txtgen'\r\n\r\nimport { parseISO } from 'date-fns'\r\n\r\nconst NUM_USERS = 3\r\nconst POSTS_PER_USER = 3\r\nconst RECENT_NOTIFICATIONS_DAYS = 7\r\n\r\n// Add an extra delay to all endpoints, so loading spinners show up.\r\nconst ARTIFICIAL_DELAY_MS = 2000\r\n\r\n/* RNG setup */\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n  let seedDate\r\n\r\n  if (randomSeedString) {\r\n    seedDate = new Date(randomSeedString)\r\n  } else {\r\n    seedDate = new Date()\r\n    randomSeedString = seedDate.toISOString()\r\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n  }\r\n\r\n  rng = seedrandom(randomSeedString)\r\n  setRandom(rng)\r\n  faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n  const index = getRandomInt(0, array.length - 1)\r\n  return array[index]\r\n}\r\n\r\n/* MSW Data Model Setup */\r\n\r\nexport const db = factory({\r\n  user: {\r\n    id: primaryKey(nanoid),\r\n    firstName: String,\r\n    lastName: String,\r\n    name: String,\r\n    username: String,\r\n    posts: manyOf('post'),\r\n  },\r\n  post: {\r\n    id: primaryKey(nanoid),\r\n    title: String,\r\n    date: String,\r\n    content: String,\r\n    reactions: oneOf('reaction'),\r\n    comments: manyOf('comment'),\r\n    user: oneOf('user'),\r\n  },\r\n  comment: {\r\n    id: primaryKey(String),\r\n    date: String,\r\n    text: String,\r\n    post: oneOf('post'),\r\n  },\r\n  reaction: {\r\n    id: primaryKey(nanoid),\r\n    thumbsUp: Number,\r\n    hooray: Number,\r\n    heart: Number,\r\n    rocket: Number,\r\n    eyes: Number,\r\n    post: oneOf('post'),\r\n  },\r\n})\r\n\r\nconst createUserData = () => {\r\n  const firstName = faker.name.firstName()\r\n  const lastName = faker.name.lastName()\r\n\r\n  return {\r\n    firstName,\r\n    lastName,\r\n    name: `${firstName} ${lastName}`,\r\n    username: faker.internet.userName(),\r\n  }\r\n}\r\n\r\nconst createPostData = (user) => {\r\n  return {\r\n    title: faker.lorem.words(),\r\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\r\n    user,\r\n    content: faker.lorem.paragraphs(),\r\n    reactions: db.reaction.create(),\r\n  }\r\n}\r\n\r\n// Create an initial set of users and posts\r\nfor (let i = 0; i < NUM_USERS; i++) {\r\n  const author = db.user.create(createUserData())\r\n\r\n  for (let j = 0; j < POSTS_PER_USER; j++) {\r\n    const newPost = createPostData(author)\r\n    db.post.create(newPost)\r\n  }\r\n}\r\n\r\nconst serializePost = (post) => ({\r\n  ...post,\r\n  user: post.user.id,\r\n})\r\n\r\n/* MSW REST API Handlers */\r\n\r\nexport const handlers = [\r\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\r\n    const posts = db.post.getAll().map(serializePost)\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\r\n  }),\r\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\r\n    const data = req.body\r\n\r\n    if (data.content === 'error') {\r\n      return res(\r\n        ctx.delay(ARTIFICIAL_DELAY_MS),\r\n        ctx.status(500),\r\n        ctx.json('Server error saving this post!')\r\n      )\r\n    }\r\n\r\n    data.date = new Date().toISOString()\r\n\r\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\r\n    data.user = user\r\n    data.reactions = db.reaction.create()\r\n\r\n    const post = db.post.create(data)\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\r\n  }),\r\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\r\n    const post = db.post.findFirst({\r\n      where: { id: { equals: req.params.postId } },\r\n    })\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\r\n  }),\r\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\r\n    const { id, ...data } = req.body\r\n    const updatedPost = db.post.update({\r\n      where: { id: { equals: req.params.postId } },\r\n      data,\r\n    })\r\n    return res(\r\n      ctx.delay(ARTIFICIAL_DELAY_MS),\r\n      ctx.json(serializePost(updatedPost))\r\n    )\r\n  }),\r\n\r\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\r\n    const post = db.post.findFirst({\r\n      where: { id: { equals: req.params.postId } },\r\n    })\r\n    return res(\r\n      ctx.delay(ARTIFICIAL_DELAY_MS),\r\n      ctx.json({ comments: post.comments })\r\n    )\r\n  }),\r\n\r\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\r\n    const postId = req.params.postId\r\n    const reaction = req.body.reaction\r\n    const post = db.post.findFirst({\r\n      where: { id: { equals: postId } },\r\n    })\r\n\r\n    const updatedPost = db.post.update({\r\n      where: { id: { equals: postId } },\r\n      data: {\r\n        reactions: {\r\n          ...post.reactions,\r\n          [reaction]: (post.reactions[reaction] += 1),\r\n        },\r\n      },\r\n    })\r\n\r\n    return res(\r\n      ctx.delay(ARTIFICIAL_DELAY_MS),\r\n      ctx.json(serializePost(updatedPost))\r\n    )\r\n  }),\r\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\r\n    const numNotifications = getRandomInt(1, 5)\r\n\r\n    let notifications = generateRandomNotifications(\r\n      undefined,\r\n      numNotifications,\r\n      db\r\n    )\r\n\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\r\n  }),\r\n  rest.get('/fakeApi/users', (req, res, ctx) => {\r\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\r\n  }),\r\n]\r\n\r\nexport const worker = setupWorker(...handlers)\r\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\r\n\r\n/* Mock Websocket Setup */\r\n\r\nconst socketServer = new MockSocketServer('ws://localhost')\r\n\r\nlet currentSocket\r\n\r\nconst sendMessage = (socket, obj) => {\r\n  socket.send(JSON.stringify(obj))\r\n}\r\n\r\n// Allow our UI to fake the server pushing out some notifications over the websocket,\r\n// as if other users were interacting with the system.\r\nconst sendRandomNotifications = (socket, since) => {\r\n  const numNotifications = getRandomInt(1, 5)\r\n\r\n  const notifications = generateRandomNotifications(since, numNotifications, db)\r\n\r\n  sendMessage(socket, { type: 'notifications', payload: notifications })\r\n}\r\n\r\nexport const forceGenerateNotifications = (since) => {\r\n  sendRandomNotifications(currentSocket, since)\r\n}\r\n\r\nsocketServer.on('connection', (socket) => {\r\n  currentSocket = socket\r\n\r\n  socket.on('message', (data) => {\r\n    const message = JSON.parse(data)\r\n\r\n    switch (message.type) {\r\n      case 'notifications': {\r\n        const since = message.payload\r\n        sendRandomNotifications(socket, since)\r\n        break\r\n      }\r\n      default:\r\n        break\r\n    }\r\n  })\r\n})\r\n\r\n/* Random Notifications Generation */\r\n\r\nconst notificationTemplates = [\r\n  'poked you',\r\n  'says hi!',\r\n  `is glad we're friends`,\r\n  'sent you a gift',\r\n]\r\n\r\nfunction generateRandomNotifications(since, numNotifications, db) {\r\n  const now = new Date()\r\n  let pastDate\r\n\r\n  if (since) {\r\n    pastDate = parseISO(since)\r\n  } else {\r\n    pastDate = new Date(now.valueOf())\r\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\r\n  }\r\n\r\n  // Create N random notifications. We won't bother saving these\r\n  // in the DB - just generate a new batch and return them.\r\n  const notifications = [...Array(numNotifications)].map(() => {\r\n    const user = randomFromArray(db.user.getAll())\r\n    const template = randomFromArray(notificationTemplates)\r\n    return {\r\n      id: nanoid(),\r\n      date: faker.date.between(pastDate, now).toISOString(),\r\n      message: template,\r\n      user: user.id,\r\n    }\r\n  })\r\n\r\n  return notifications\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport postsReduser from '../features/posts/postsSlice'\r\nimport usersReduser from '../features/users/usersSlice'\r\nimport notificationsReduser from '../features/notifications/notificationsSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReduser,\r\n    users: usersReduser,\r\n    notifications: notificationsReduser,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { fetchUsers } from './features/users/usersSlice'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport { worker } from './api/server'\r\n\r\n// Wrap app rendering so we can wait for the mock API to initialize\r\nasync function start() {\r\n  // Start our mock API server\r\n  if (process.env.NODE_ENV === \"development\") {\r\n  await worker.start({ onUnhandledRequest: 'bypass' })\r\n  }\r\n  store.dispatch(fetchUsers())\r\n\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  )\r\n}\r\n\r\nstart()\r\n"],"sourceRoot":""}